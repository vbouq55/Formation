import pickle # Module pour sauvegarder et charger des objets Python (comme notre dictionnaire de scores)
import os     # Module pour interagir avec le syst√®me d'exploitation, notamment v√©rifier l'existence d'un fichier
import random # Module pour choisir un mot al√©atoirement

# On importe les variables de donn√©es depuis notre fichier donnees.py
from donnees import LISTE_MOTS, NBR_CHANCES, CHEMIN_SCORES

def charger_scores(chemin_fichier):
    """
    Charge les scores depuis le fichier sp√©cifi√©.
    Retourne un dictionnaire des scores ou un dictionnaire vide si le fichier n'existe pas
    ou ne peut pas √™tre lu.
    """
    if os.path.exists(chemin_fichier):
        # Le fichier existe, on essaie de le lire
        with open(chemin_fichier, 'rb') as f: # 'rb' pour read binary, car pickle travaille en binaire
            try:
                scores = pickle.load(f)
                print("Scores charg√©s avec succ√®s.")
            except (pickle.UnpicklingError, EOFError):
                # Si le fichier est vide ou corrompu, on recommence avec un dictionnaire vide
                scores = {}
                print("Attention : Fichier de scores corrompu ou vide. Cr√©ation d'un nouveau fichier.")
            except Exception as e:
                # G√©rer d'autres erreurs potentielles lors de la lecture
                scores = {}
                print(f"Erreur lors du chargement des scores : {e}. Cr√©ation d'un nouveau fichier.")
    else:
        # Le fichier n'existe pas encore
        scores = {}
        print(f"Fichier de scores '{chemin_fichier}' non trouv√©. Cr√©ation d'un nouveau.")
    return scores

def enregistrer_scores(scores_dict, chemin_fichier):
    """
    Enregistre le dictionnaire de scores dans le fichier sp√©cifi√©.
    """
    try:
        with open(chemin_fichier, 'wb') as f: # 'wb' pour write binary
            pickle.dump(scores_dict, f)
        print("Scores enregistr√©s avec succ√®s.")
    except Exception as e:
        print(f"Erreur lors de l'enregistrement des scores : {e}")


def choisir_mot(liste_mots):
    """
    Choisit un mot al√©atoire dans la liste fournie.
    """
    return random.choice(liste_mots)

def afficher_mot_cache(mot_secret, lettres_trouvees):
    """
    Construit et retourne la cha√Æne √† afficher avec les lettres trouv√©es
    et des √©toiles (*) pour les lettres non trouv√©es.
    """
    affichage = ""
    for lettre in mot_secret:
        if lettre in lettres_trouvees:
            affichage += lettre
        else:
            affichage += "*"
    return affichage

def saisir_lettre(lettres_deja_saisies):
    """
    Demande au joueur de saisir une lettre et valide l'entr√©e.
    L'entr√©e doit √™tre une seule lettre de l'alphabet, non d√©j√† saisie.
    """
    while True: # Boucle tant que l'entr√©e n'est pas valide
        lettre = input("Saisissez une lettre : ").lower().strip() # Lire l'entr√©e, la mettre en minuscule et enlever les espaces

        if len(lettre) != 1:
            print("‚ùå Veuillez saisir *une seule* lettre.")
        elif not lettre.isalpha():
            print("‚ùå Veuillez saisir une lettre de l'alphabet.")
        elif lettre in lettres_deja_saisies:
            print(f"‚úã Vous avez d√©j√† saisi la lettre '{lettre}'. Essayez une autre.")
        else:
            # L'entr√©e est valide et n'a pas √©t√© saisie auparavant
            return lettre # On sort de la boucle en retournant la lettre valide


def gerer_partie(mot_secret, nbr_chances_initiales, nom_joueur, scores):
    """
    G√®re le d√©roulement complet d'une partie de jeu du pendu pour un joueur donn√©.
    Met √† jour le dictionnaire de scores en cas de victoire.
    Retourne le dictionnaire de scores potentiellement mis √† jour.
    """
    lettres_trouvees = set() # Ensemble des lettres du mot secret qui ont √©t√© trouv√©es
    lettres_saisies_total = set() # Ensemble de *toutes* les lettres que le joueur a saisies (pour √©viter de les redemander)
    chances_restantes = nbr_chances_initiales

    print(f"\n--- Nouvelle partie pour {nom_joueur} ---")
    print(f"Mot √† trouver : {afficher_mot_cache(mot_secret, lettres_trouvees)}")

    # Boucle principale du jeu pour une partie
    while chances_restantes > 0:
        print(f"\nChances restantes : {chances_restantes}")
        print(f"Lettres d√©j√† essay√©es : {' '.join(sorted(list(lettres_saisies_total)))}") # Afficher les lettres d√©j√† essay√©es

        # Demander une lettre valide au joueur
        lettre_saisie = saisir_lettre(lettres_saisies_total)
        lettres_saisies_total.add(lettre_saisie) # Ajouter la lettre √† l'ensemble des lettres d√©j√† saisies

        if lettre_saisie in mot_secret:
            print(f"‚úÖ Bravo ! La lettre '{lettre_saisie}' est dans le mot.")
            lettres_trouvees.add(lettre_saisie) # Ajouter la lettre √† l'ensemble des lettres trouv√©es

            mot_actuel_affiche = afficher_mot_cache(mot_secret, lettres_trouvees)
            print(f"Mot actuel : {mot_actuel_affiche}")

            # V√©rifier si toutes les lettres du mot ont √©t√© trouv√©es
            mot_trouve_completement = all(lettre in lettres_trouvees for lettre in mot_secret)

            if mot_trouve_completement:
                print("\nüéâ F√©licitations ! Vous avez trouv√© le mot :", mot_secret)
                score_gagne = chances_restantes # Le score est le nombre de chances restantes
                print(f"Vous gagnez {score_gagne} points.")
                # Mettre √† jour le score du joueur
                # On s'assure que le joueur existe, m√™me si pendu.py le fait d√©j√†, c'est plus s√ªr ici
                if nom_joueur not in scores:
                     scores[nom_joueur] = 0
                scores[nom_joueur] += score_gagne
                return scores # La partie est gagn√©e, on retourne les scores mis √† jour

        else:
            print(f"‚ùå Dommage ! La lettre '{lettre_saisie}' n'est pas dans le mot.")
            chances_restantes -= 1 # Une chance perdue
            print(f"Mot actuel : {afficher_mot_cache(mot_secret, lettres_trouvees)}")

    # Si on sort de la boucle while, c'est que chances_restantes est arriv√© √† 0
    print("\nüò• Oh non ! Vous n'avez plus de chances.")
    print("Vous avez perdu. Le mot √©tait :", mot_secret)
    # Pas de points gagn√©s, on retourne les scores sans modification pour cette partie
    return scores
